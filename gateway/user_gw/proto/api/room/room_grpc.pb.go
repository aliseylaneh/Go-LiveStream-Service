// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/protos/room/room.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoomService_RegisterRoom_FullMethodName           = "/room.RoomService/register_room"
	RoomService_CloseRoom_FullMethodName              = "/room.RoomService/close_room"
	RoomService_GetRoomsByUserid_FullMethodName       = "/room.RoomService/get_rooms_by_userid"
	RoomService_GetRoomByRoomid_FullMethodName        = "/room.RoomService/get_room_by_roomid"
	RoomService_GetOpenRoomByUserid_FullMethodName    = "/room.RoomService/get_open_room_by_userid"
	RoomService_GetRoomCreatorByRoomid_FullMethodName = "/room.RoomService/get_room_creator_by_roomid"
	RoomService_CheckRoomJoinable_FullMethodName      = "/room.RoomService/check_room_joinable"
	RoomService_GetRooms_FullMethodName               = "/room.RoomService/get_rooms"
	RoomService_GetOpenRooms_FullMethodName           = "/room.RoomService/get_open_rooms"
	RoomService_AddRoomLog_FullMethodName             = "/room.RoomService/add_room_log"
	RoomService_GetRoomLogsByRoomid_FullMethodName    = "/room.RoomService/get_room_logs_by_roomid"
	RoomService_AddRoomResult_FullMethodName          = "/room.RoomService/add_room_result"
	RoomService_GetRoomResults_FullMethodName         = "/room.RoomService/get_room_results"
	RoomService_GetRoomResultByRoomid_FullMethodName  = "/room.RoomService/get_room_result_by_roomid"
	RoomService_GetRoomResultsCount_FullMethodName    = "/room.RoomService/get_room_results_count"
	RoomService_GetAllUsers_FullMethodName            = "/room.RoomService/get_all_users"
	RoomService_AddBanUser_FullMethodName             = "/room.RoomService/add_ban_user"
	RoomService_RemoveBanUser_FullMethodName          = "/room.RoomService/remove_ban_user"
)

// RoomServiceClient is the client API for RoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomServiceClient interface {
	RegisterRoom(ctx context.Context, in *RegisterRoomRequest, opts ...grpc.CallOption) (*RegisterRoomResponse, error)
	CloseRoom(ctx context.Context, in *CloseRoomByRoomIdRequest, opts ...grpc.CallOption) (*Empty, error)
	GetRoomsByUserid(ctx context.Context, in *GetRoomByUserId, opts ...grpc.CallOption) (*Rooms, error)
	GetRoomByRoomid(ctx context.Context, in *GetRoomByRoomId, opts ...grpc.CallOption) (*Room, error)
	GetOpenRoomByUserid(ctx context.Context, in *GetRoomByUserId, opts ...grpc.CallOption) (*Room, error)
	GetRoomCreatorByRoomid(ctx context.Context, in *GetRoomByRoomId, opts ...grpc.CallOption) (*GetRoomByUserId, error)
	CheckRoomJoinable(ctx context.Context, in *IsRoomJoinableRequest, opts ...grpc.CallOption) (*IsRoomJoinableResponse, error)
	GetRooms(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Rooms, error)
	GetOpenRooms(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Rooms, error)
	AddRoomLog(ctx context.Context, in *AddRoomLog, opts ...grpc.CallOption) (*Empty, error)
	GetRoomLogsByRoomid(ctx context.Context, in *GetRoomByRoomId, opts ...grpc.CallOption) (*RoomLogs, error)
	AddRoomResult(ctx context.Context, in *AddRoomResult, opts ...grpc.CallOption) (*Empty, error)
	GetRoomResults(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*RoomResults, error)
	GetRoomResultByRoomid(ctx context.Context, in *GetRoomByRoomId, opts ...grpc.CallOption) (*RoomResult, error)
	GetRoomResultsCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoomResultsCount, error)
	GetAllUsers(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*RoomUsers, error)
	AddBanUser(ctx context.Context, in *GetRoomByUserId, opts ...grpc.CallOption) (*Empty, error)
	RemoveBanUser(ctx context.Context, in *GetRoomByUserId, opts ...grpc.CallOption) (*Empty, error)
}

type roomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomServiceClient(cc grpc.ClientConnInterface) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) RegisterRoom(ctx context.Context, in *RegisterRoomRequest, opts ...grpc.CallOption) (*RegisterRoomResponse, error) {
	out := new(RegisterRoomResponse)
	err := c.cc.Invoke(ctx, RoomService_RegisterRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) CloseRoom(ctx context.Context, in *CloseRoomByRoomIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoomService_CloseRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRoomsByUserid(ctx context.Context, in *GetRoomByUserId, opts ...grpc.CallOption) (*Rooms, error) {
	out := new(Rooms)
	err := c.cc.Invoke(ctx, RoomService_GetRoomsByUserid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRoomByRoomid(ctx context.Context, in *GetRoomByRoomId, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, RoomService_GetRoomByRoomid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetOpenRoomByUserid(ctx context.Context, in *GetRoomByUserId, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, RoomService_GetOpenRoomByUserid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRoomCreatorByRoomid(ctx context.Context, in *GetRoomByRoomId, opts ...grpc.CallOption) (*GetRoomByUserId, error) {
	out := new(GetRoomByUserId)
	err := c.cc.Invoke(ctx, RoomService_GetRoomCreatorByRoomid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) CheckRoomJoinable(ctx context.Context, in *IsRoomJoinableRequest, opts ...grpc.CallOption) (*IsRoomJoinableResponse, error) {
	out := new(IsRoomJoinableResponse)
	err := c.cc.Invoke(ctx, RoomService_CheckRoomJoinable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRooms(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Rooms, error) {
	out := new(Rooms)
	err := c.cc.Invoke(ctx, RoomService_GetRooms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetOpenRooms(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Rooms, error) {
	out := new(Rooms)
	err := c.cc.Invoke(ctx, RoomService_GetOpenRooms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) AddRoomLog(ctx context.Context, in *AddRoomLog, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoomService_AddRoomLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRoomLogsByRoomid(ctx context.Context, in *GetRoomByRoomId, opts ...grpc.CallOption) (*RoomLogs, error) {
	out := new(RoomLogs)
	err := c.cc.Invoke(ctx, RoomService_GetRoomLogsByRoomid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) AddRoomResult(ctx context.Context, in *AddRoomResult, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoomService_AddRoomResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRoomResults(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*RoomResults, error) {
	out := new(RoomResults)
	err := c.cc.Invoke(ctx, RoomService_GetRoomResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRoomResultByRoomid(ctx context.Context, in *GetRoomByRoomId, opts ...grpc.CallOption) (*RoomResult, error) {
	out := new(RoomResult)
	err := c.cc.Invoke(ctx, RoomService_GetRoomResultByRoomid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRoomResultsCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoomResultsCount, error) {
	out := new(RoomResultsCount)
	err := c.cc.Invoke(ctx, RoomService_GetRoomResultsCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetAllUsers(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*RoomUsers, error) {
	out := new(RoomUsers)
	err := c.cc.Invoke(ctx, RoomService_GetAllUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) AddBanUser(ctx context.Context, in *GetRoomByUserId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoomService_AddBanUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RemoveBanUser(ctx context.Context, in *GetRoomByUserId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoomService_RemoveBanUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServiceServer is the server API for RoomService service.
// All implementations must embed UnimplementedRoomServiceServer
// for forward compatibility
type RoomServiceServer interface {
	RegisterRoom(context.Context, *RegisterRoomRequest) (*RegisterRoomResponse, error)
	CloseRoom(context.Context, *CloseRoomByRoomIdRequest) (*Empty, error)
	GetRoomsByUserid(context.Context, *GetRoomByUserId) (*Rooms, error)
	GetRoomByRoomid(context.Context, *GetRoomByRoomId) (*Room, error)
	GetOpenRoomByUserid(context.Context, *GetRoomByUserId) (*Room, error)
	GetRoomCreatorByRoomid(context.Context, *GetRoomByRoomId) (*GetRoomByUserId, error)
	CheckRoomJoinable(context.Context, *IsRoomJoinableRequest) (*IsRoomJoinableResponse, error)
	GetRooms(context.Context, *Pagination) (*Rooms, error)
	GetOpenRooms(context.Context, *Pagination) (*Rooms, error)
	AddRoomLog(context.Context, *AddRoomLog) (*Empty, error)
	GetRoomLogsByRoomid(context.Context, *GetRoomByRoomId) (*RoomLogs, error)
	AddRoomResult(context.Context, *AddRoomResult) (*Empty, error)
	GetRoomResults(context.Context, *Pagination) (*RoomResults, error)
	GetRoomResultByRoomid(context.Context, *GetRoomByRoomId) (*RoomResult, error)
	GetRoomResultsCount(context.Context, *Empty) (*RoomResultsCount, error)
	GetAllUsers(context.Context, *Pagination) (*RoomUsers, error)
	AddBanUser(context.Context, *GetRoomByUserId) (*Empty, error)
	RemoveBanUser(context.Context, *GetRoomByUserId) (*Empty, error)
	mustEmbedUnimplementedRoomServiceServer()
}

// UnimplementedRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoomServiceServer struct {
}

func (UnimplementedRoomServiceServer) RegisterRoom(context.Context, *RegisterRoomRequest) (*RegisterRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRoom not implemented")
}
func (UnimplementedRoomServiceServer) CloseRoom(context.Context, *CloseRoomByRoomIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseRoom not implemented")
}
func (UnimplementedRoomServiceServer) GetRoomsByUserid(context.Context, *GetRoomByUserId) (*Rooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomsByUserid not implemented")
}
func (UnimplementedRoomServiceServer) GetRoomByRoomid(context.Context, *GetRoomByRoomId) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomByRoomid not implemented")
}
func (UnimplementedRoomServiceServer) GetOpenRoomByUserid(context.Context, *GetRoomByUserId) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenRoomByUserid not implemented")
}
func (UnimplementedRoomServiceServer) GetRoomCreatorByRoomid(context.Context, *GetRoomByRoomId) (*GetRoomByUserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomCreatorByRoomid not implemented")
}
func (UnimplementedRoomServiceServer) CheckRoomJoinable(context.Context, *IsRoomJoinableRequest) (*IsRoomJoinableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRoomJoinable not implemented")
}
func (UnimplementedRoomServiceServer) GetRooms(context.Context, *Pagination) (*Rooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedRoomServiceServer) GetOpenRooms(context.Context, *Pagination) (*Rooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenRooms not implemented")
}
func (UnimplementedRoomServiceServer) AddRoomLog(context.Context, *AddRoomLog) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoomLog not implemented")
}
func (UnimplementedRoomServiceServer) GetRoomLogsByRoomid(context.Context, *GetRoomByRoomId) (*RoomLogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomLogsByRoomid not implemented")
}
func (UnimplementedRoomServiceServer) AddRoomResult(context.Context, *AddRoomResult) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoomResult not implemented")
}
func (UnimplementedRoomServiceServer) GetRoomResults(context.Context, *Pagination) (*RoomResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomResults not implemented")
}
func (UnimplementedRoomServiceServer) GetRoomResultByRoomid(context.Context, *GetRoomByRoomId) (*RoomResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomResultByRoomid not implemented")
}
func (UnimplementedRoomServiceServer) GetRoomResultsCount(context.Context, *Empty) (*RoomResultsCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomResultsCount not implemented")
}
func (UnimplementedRoomServiceServer) GetAllUsers(context.Context, *Pagination) (*RoomUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedRoomServiceServer) AddBanUser(context.Context, *GetRoomByUserId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanUser not implemented")
}
func (UnimplementedRoomServiceServer) RemoveBanUser(context.Context, *GetRoomByUserId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBanUser not implemented")
}
func (UnimplementedRoomServiceServer) mustEmbedUnimplementedRoomServiceServer() {}

// UnsafeRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServiceServer will
// result in compilation errors.
type UnsafeRoomServiceServer interface {
	mustEmbedUnimplementedRoomServiceServer()
}

func RegisterRoomServiceServer(s grpc.ServiceRegistrar, srv RoomServiceServer) {
	s.RegisterService(&RoomService_ServiceDesc, srv)
}

func _RoomService_RegisterRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RegisterRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_RegisterRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RegisterRoom(ctx, req.(*RegisterRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_CloseRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRoomByRoomIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).CloseRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_CloseRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).CloseRoom(ctx, req.(*CloseRoomByRoomIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRoomsByUserid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRoomsByUserid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_GetRoomsByUserid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRoomsByUserid(ctx, req.(*GetRoomByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRoomByRoomid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomByRoomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRoomByRoomid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_GetRoomByRoomid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRoomByRoomid(ctx, req.(*GetRoomByRoomId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetOpenRoomByUserid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetOpenRoomByUserid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_GetOpenRoomByUserid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetOpenRoomByUserid(ctx, req.(*GetRoomByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRoomCreatorByRoomid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomByRoomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRoomCreatorByRoomid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_GetRoomCreatorByRoomid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRoomCreatorByRoomid(ctx, req.(*GetRoomByRoomId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_CheckRoomJoinable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsRoomJoinableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).CheckRoomJoinable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_CheckRoomJoinable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).CheckRoomJoinable(ctx, req.(*IsRoomJoinableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_GetRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRooms(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetOpenRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetOpenRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_GetOpenRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetOpenRooms(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_AddRoomLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoomLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).AddRoomLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_AddRoomLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).AddRoomLog(ctx, req.(*AddRoomLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRoomLogsByRoomid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomByRoomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRoomLogsByRoomid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_GetRoomLogsByRoomid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRoomLogsByRoomid(ctx, req.(*GetRoomByRoomId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_AddRoomResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoomResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).AddRoomResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_AddRoomResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).AddRoomResult(ctx, req.(*AddRoomResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRoomResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRoomResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_GetRoomResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRoomResults(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRoomResultByRoomid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomByRoomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRoomResultByRoomid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_GetRoomResultByRoomid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRoomResultByRoomid(ctx, req.(*GetRoomByRoomId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRoomResultsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRoomResultsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_GetRoomResultsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRoomResultsCount(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetAllUsers(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_AddBanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).AddBanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_AddBanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).AddBanUser(ctx, req.(*GetRoomByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RemoveBanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RemoveBanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_RemoveBanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RemoveBanUser(ctx, req.(*GetRoomByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomService_ServiceDesc is the grpc.ServiceDesc for RoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "room.RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register_room",
			Handler:    _RoomService_RegisterRoom_Handler,
		},
		{
			MethodName: "close_room",
			Handler:    _RoomService_CloseRoom_Handler,
		},
		{
			MethodName: "get_rooms_by_userid",
			Handler:    _RoomService_GetRoomsByUserid_Handler,
		},
		{
			MethodName: "get_room_by_roomid",
			Handler:    _RoomService_GetRoomByRoomid_Handler,
		},
		{
			MethodName: "get_open_room_by_userid",
			Handler:    _RoomService_GetOpenRoomByUserid_Handler,
		},
		{
			MethodName: "get_room_creator_by_roomid",
			Handler:    _RoomService_GetRoomCreatorByRoomid_Handler,
		},
		{
			MethodName: "check_room_joinable",
			Handler:    _RoomService_CheckRoomJoinable_Handler,
		},
		{
			MethodName: "get_rooms",
			Handler:    _RoomService_GetRooms_Handler,
		},
		{
			MethodName: "get_open_rooms",
			Handler:    _RoomService_GetOpenRooms_Handler,
		},
		{
			MethodName: "add_room_log",
			Handler:    _RoomService_AddRoomLog_Handler,
		},
		{
			MethodName: "get_room_logs_by_roomid",
			Handler:    _RoomService_GetRoomLogsByRoomid_Handler,
		},
		{
			MethodName: "add_room_result",
			Handler:    _RoomService_AddRoomResult_Handler,
		},
		{
			MethodName: "get_room_results",
			Handler:    _RoomService_GetRoomResults_Handler,
		},
		{
			MethodName: "get_room_result_by_roomid",
			Handler:    _RoomService_GetRoomResultByRoomid_Handler,
		},
		{
			MethodName: "get_room_results_count",
			Handler:    _RoomService_GetRoomResultsCount_Handler,
		},
		{
			MethodName: "get_all_users",
			Handler:    _RoomService_GetAllUsers_Handler,
		},
		{
			MethodName: "add_ban_user",
			Handler:    _RoomService_AddBanUser_Handler,
		},
		{
			MethodName: "remove_ban_user",
			Handler:    _RoomService_RemoveBanUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/protos/room/room.proto",
}
